

1. 새 프로젝트
- Project name: "WebSocketTest"
- Templates: Spring MVC Project
- Enter a topLevelPackage: "com.test.websocket"

2. 스프링/자바 버전 변경하기
3. Servlet/jsp 변경하기
4. lombok 추가

5. WebSocket

<!-- 	WebSocket -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-websocket</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency> 
	<dependency>
	    <groupId>javax.websocket</groupId>
	    <artifactId>javax.websocket-api</artifactId>
	    <version>1.1</version>
	</dependency>   

- 웹소켓은 하나의 TCP 접속에 전이중 통신 채널을 제공하는 컴퓨터 통신 프로토콜이다.
- Socket(규격) > 네트워크상의 호스트간의 데이터를 주고 받는 규약
- WebSocket은 ws프로토콜을 기반으로 클라이언트와 서버 사이에 지속적인 완전 양방향 연결스트림을 만들어 주는 기술

버튼 클릭을 한다던지 클라이언트는 언제든지 서버에게 요청이 가능 > 클라이언트 요청이 없으면 서버에서 데이터를 줄 수 없음 > HTTP통신의 특징
WS 프로토콜은 클라이언트 반응 없이도 데이터 전달이 서로서로 전달 가능 > 양방향 통신


소켓 동작
1. 호스트 A, 호스트 B
ip주소로 컴퓨터만 찾고 네트워크 프로그램을 알 수 없기 떄문에 포트번호도 알아야 함. 포트번호 : 수많은 네트워크의 프로그램 식별자
2. 호스트A > 소켓(전화기)생성 + IP주소(+포트번호)(전화번호) > 종단점(EndPoint)
3. 호스트B > 소켓(전화기)생성 + IP주소(+포트번호)(전화번호) > 종단점(EndPoint)

4. 호스트B > 받는 사람(서버) > 미리 수신 대기 준비
5. 호스트A > 거는 사람(클라이언트 ) > 호스트B 종단점을 알아내서 연결 시도!
6. 호스트B > 연결 성립 > 호스트A와 연결되어 있는 전용 소켓을 생성(***)

7. 서로 연결 > 서로간의 데이터를 송수신 가능~~
8. 호스트A,호스트B > 소켓 종료(close) > 통신 종료

파일 생성
- "com.test.websocket.controller" > SocketController.java"
- "com.test.websocket.server" > "SocketServer.java"
- views > "test.jsp"

- com.test.websocket.controller > "ChatController.java"
- views > "index.jsp" //접속 화면
		> "chat.jsp" //대화 화면
		
- com.test.websocket.server > "ChatServer.java"
- "com.test.websocket.domain" > "Message.java"

























